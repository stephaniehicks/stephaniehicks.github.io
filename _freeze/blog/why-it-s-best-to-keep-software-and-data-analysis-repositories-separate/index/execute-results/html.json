{
  "hash": "293694eda643a3eb8102ebca524b74af",
  "result": {
    "markdown": "---\ntitle: \"Why it's best to keep software and data analysis repositories separate\"\nauthor: \"Stephanie C. Hicks\"\ndate: \"2022-02-27\"\ncategories: [data analysis]\n---\n\n\nWhenever I am wrapping up a project for work (e.g. writing up a manuscript to submit), it's often the case that the project as a whole contains both of the following: \n\n1. A set of scripts (e.g. `.Rmd` files) that analyzes some **specific** data.\n2. A software package (e.g R package) often **generalizing** some of the functions from #1 that someone else might be able to use to help in their own data analysis.\n\nBoth of these are incredibly useful for many reasons, but in different ways. \n\nFor example, in the first category, the idea is to produce set of scripts to enable **reproducibility of the specific analyses presented in the project** (e.g. peer-reviewed manuscript). Also, this is a way to provide larger details on the motivation or intentional decisions behind the choices made in the data analysis. There are a variety of reasons someone down the line, including myself 6 months or 6 years from now, might be interested in the exact code written in this project, including debugging something, wanting to build upon the work, or challenging the work. \n\nIn the second category, the idea is that I have identified a piece of code that can be **generalized into a function** that might be useful to someone else, including myself, for a future project. There are many [best practices behind developing R packages](https://r-pkgs.org/workflows101.html), but one that wasn't very clear to me at first when I starting writing my own software was: \n\n\n> **Software and data analysis repositories are not the same and should be kept in separate places.** \n\n# The problem? \n\nLet me give you an example of something I've seen lately. Someone publishes a pre-print or a paper with a link to a GitHub repository to the `foobar` software package. I click on the link see the following structure: \n\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n\nfoobar project directory\n  |-- .here\n  |  o-- object of type(s):file\n  |-- README.md\n  |  o-- object of type(s):file\n  |-- NAMESPACE\n  |  o-- object of type(s):file\n  |-- DESCRIPTION\n  |  o-- object of type(s):file\n  |-- LICENSE\n  |  o-- object of type(s):file\n  |-- foobar.Rproj\n  |  o-- object of type(s):file\n  |-- R/\n  |  o-- object of type(s):dir\n  |-- man/\n  |  o-- object of type(s):dir\n  |-- vignettes/\n  |  o-- object of type(s):dir\n  |-- preprocessing_for_paper/\n  |  o-- object of type(s):dir\n  |-- simulations_for_paper/\n  |  o-- object of type(s):dir\n  |-- real_analyses_for_paper/\n  |  o-- object of type(s):dir\n  |-- fig_scripts_for_paper/\n  |  o-- object of type(s):dir\n  o-- data_for_paper/\n     o-- object of type(s):dir\n```\n:::\n:::\n\n\nThe problem with this project directory is that it is mixing up both #1 and #2 above and placing everything in one directory. This places an undue burden on a potential user to have to sift through these two types of code and depending on what they are interested in using, they might have to make modifications for how the software is installed. \n\n# How to improve? \n\nA better way to go is to keep these two in separate directories or repositories called `foobar` and `foobar_paper`. Specifically, the scripts to reproduce the analyses should be place in one repository (e.g. called `foobar_paper` or `foorbar_project`): \n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n\nfoobar paper analysis directory\n  |-- .here\n  |  o-- object of type(s):file\n  |-- README.md\n  |  o-- object of type(s):file\n  |-- preprocessing_for_paper/\n  |  o-- object of type(s):dir\n  |-- simulations_for_paper/\n  |  o-- object of type(s):dir\n  |-- real_analyses_for_paper/\n  |  o-- object of type(s):dir\n  |-- fig_scripts_for_paper/\n  |  o-- object of type(s):dir\n  o-- data_for_paper/\n     o-- object of type(s):dir\n```\n:::\n:::\n\n\nand the software that generalizes some code into a function for others to use should be placed in a different repository (e.g. called `foobar`, etc): \n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n\nfoobar software directory\n  |-- .here\n  |  o-- object of type(s):file\n  |-- README.md\n  |  o-- object of type(s):file\n  |-- NAMESPACE\n  |  o-- object of type(s):file\n  |-- DESCRIPTION\n  |  o-- object of type(s):file\n  |-- LICENSE\n  |  o-- object of type(s):file\n  |-- foo_package.Rproj\n  |  o-- object of type(s):file\n  |-- R/\n  |  o-- object of type(s):dir\n  |-- man/\n  |  o-- object of type(s):dir\n  o-- vignettes/\n     o-- object of type(s):dir\n```\n:::\n:::\n\n\nThis is good for a few reasons including: \n\n1. It keeps the two separate, but equally important, concepts of **specific analysis code** vs **generalized code** in different places, with links between the two, if useful.\n2. It keeps the repositories as lightweight as possible. \n3. Installation of the `foobar` software package is more straightforward.\n4. It enables you to potentially create new generalized functions in the future (i.e. make new software packages) that might have been originally derived from this project.\n5. (Update 2022-03-02): It makes it more likely that the `foobar` software package is reusable independently of the paper code or context (h/t [Rahul Karnik](https://twitter.com/genebrew/status/1498289144937787394)).\n\n# Alternatives\n\n(Update 2022-03-02): Konrad Rudolph made a [great point that there are alternative approaches](https://twitter.com/klmr/status/1498294352627568645) to these nested package approaches that enable organizing R code in a modular way without the ned to wrap code into a formal R package. For example, using [modules from `box`](https://klmr.me/box). The idea is you can write \"modular code by treating files and folders of R code as independent (potentially nested) modules, without requiring the user to wrap reusable code into packages\".\n\n# Acknowledgements\n\nThank you to the [`listdown` R package](https://github.com/kaneplusplus/listdown) from [Michael Kane](https://ysph.yale.edu/profile/michael_kane), which automated the folder structures above. \n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}